// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: proto/P.proto
package edu.ucla.nesl.sigma.P;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REPEATED;
import static com.squareup.wire.Message.Label.REQUIRED;

public final class SParcel extends Message {

    public static final String DEFAULT_BYTES = "";
    public static final List<URI> DEFAULT_OBJECTS = Collections.emptyList();

    @ProtoField(tag = 1, type = STRING, label = REQUIRED)
    public final String bytes;

    @ProtoField(tag = 2, label = REPEATED)
    public final List<URI> objects;

    private SParcel(Builder builder) {
        super(builder);
        this.bytes = builder.bytes;
        this.objects = immutableCopyOf(builder.objects);
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) return true;
        if (!(other instanceof SParcel)) return false;
        SParcel o = (SParcel) other;
        return equals(bytes, o.bytes)
                && equals(objects, o.objects);
    }

    @Override
    public int hashCode() {
        int result = hashCode;
        if (result == 0) {
            result = bytes != null ? bytes.hashCode() : 0;
            result = result * 37 + (objects != null ? objects.hashCode() : 0);
            hashCode = result;
        }
        return result;
    }

    public static final class Builder extends Message.Builder<SParcel> {

        public String bytes;
        public List<URI> objects;

        public Builder() {
        }

        public Builder(SParcel message) {
            super(message);
            if (message == null) return;
            this.bytes = message.bytes;
            this.objects = copyOf(message.objects);
        }

        public Builder bytes(String bytes) {
            this.bytes = bytes;
            return this;
        }

        public Builder objects(List<URI> objects) {
            this.objects = objects;
            return this;
        }

        @Override
        public SParcel build() {
            checkRequiredFields();
            return new SParcel(this);
        }
    }
}
