// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: sigma/proto/P.proto
package edu.ucla.nesl.sigma.P;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoEnum;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.ENUM;
import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REQUIRED;

public final class URI extends Message {

  public static final Protocol DEFAULT_PROTOCOL = Protocol.NATIVE;
  public static final ObjectType DEFAULT_TYPE = ObjectType.BASE;
  public static final String DEFAULT_UUID = "";
  public static final Integer DEFAULT_OFFSET = 0;
  public static final String DEFAULT_CLASSNAME = "";
  public static final String DEFAULT_HOST = "";
  public static final Integer DEFAULT_PORT = 0;
  public static final String DEFAULT_LOGIN = "";
  public static final String DEFAULT_DOMAIN = "";
  public static final String DEFAULT_INTERFACE = "";
  public static final String DEFAULT_NAME = "";
  public static final String DEFAULT_PROXYHOST = "";

  @ProtoField(tag = 1, type = ENUM, label = REQUIRED)
  public final Protocol protocol;

  @ProtoField(tag = 2, type = ENUM, label = REQUIRED)
  public final ObjectType type;

  @ProtoField(tag = 3, type = STRING)
  public final String uuid;

  /**
   * set object is encoded as part of parcel.
   */
  @ProtoField(tag = 4, type = INT32)
  public final Integer offset;

  /**
   * Set by NATIVE and LOCAL protocols.
   */
  @ProtoField(tag = 5, type = STRING)
  public final String className;

  /**
   * Set by HTTP protocol
   */
  @ProtoField(tag = 6, type = STRING)
  public final String host;

  @ProtoField(tag = 7, type = INT32)
  public final Integer port;

  /**
   * Set by XMPP protocol
   */
  @ProtoField(tag = 8, type = STRING)
  public final String login;

  @ProtoField(tag = 9, type = STRING)
  public final String domain;

  /**
   * Set iff type is Binder
   */
  @ProtoField(tag = 10, type = STRING)
  public final String _interface;

  /**
   * A human-readable name for this SigmaEngine
   */
  @ProtoField(tag = 11, type = STRING, label = REQUIRED)
  public final String name;

  /**
   * Causes HTTP transactions to be targetted here, the "target"
   * in the message does not change. Used to have a proxy server
   * that forwards requests. Used for testing only.
   */
  @ProtoField(tag = 12, type = STRING)
  public final String proxyhost;

  private URI(Builder builder) {
    super(builder);
    this.protocol = builder.protocol;
    this.type = builder.type;
    this.uuid = builder.uuid;
    this.offset = builder.offset;
    this.className = builder.className;
    this.host = builder.host;
    this.port = builder.port;
    this.login = builder.login;
    this.domain = builder.domain;
    this._interface = builder._interface;
    this.name = builder.name;
    this.proxyhost = builder.proxyhost;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof URI)) return false;
    URI o = (URI) other;
    return equals(protocol, o.protocol)
        && equals(type, o.type)
        && equals(uuid, o.uuid)
        && equals(offset, o.offset)
        && equals(className, o.className)
        && equals(host, o.host)
        && equals(port, o.port)
        && equals(login, o.login)
        && equals(domain, o.domain)
        && equals(_interface, o._interface)
        && equals(name, o.name)
        && equals(proxyhost, o.proxyhost);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = protocol != null ? protocol.hashCode() : 0;
      result = result * 37 + (type != null ? type.hashCode() : 0);
      result = result * 37 + (uuid != null ? uuid.hashCode() : 0);
      result = result * 37 + (offset != null ? offset.hashCode() : 0);
      result = result * 37 + (className != null ? className.hashCode() : 0);
      result = result * 37 + (host != null ? host.hashCode() : 0);
      result = result * 37 + (port != null ? port.hashCode() : 0);
      result = result * 37 + (login != null ? login.hashCode() : 0);
      result = result * 37 + (domain != null ? domain.hashCode() : 0);
      result = result * 37 + (_interface != null ? _interface.hashCode() : 0);
      result = result * 37 + (name != null ? name.hashCode() : 0);
      result = result * 37 + (proxyhost != null ? proxyhost.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<URI> {

    public Protocol protocol;
    public ObjectType type;
    public String uuid;
    public Integer offset;
    public String className;
    public String host;
    public Integer port;
    public String login;
    public String domain;
    public String _interface;
    public String name;
    public String proxyhost;

    public Builder() {
    }

    public Builder(URI message) {
      super(message);
      if (message == null) return;
      this.protocol = message.protocol;
      this.type = message.type;
      this.uuid = message.uuid;
      this.offset = message.offset;
      this.className = message.className;
      this.host = message.host;
      this.port = message.port;
      this.login = message.login;
      this.domain = message.domain;
      this._interface = message._interface;
      this.name = message.name;
      this.proxyhost = message.proxyhost;
    }

    public Builder protocol(Protocol protocol) {
      this.protocol = protocol;
      return this;
    }

    public Builder type(ObjectType type) {
      this.type = type;
      return this;
    }

    public Builder uuid(String uuid) {
      this.uuid = uuid;
      return this;
    }

    /**
     * set object is encoded as part of parcel.
     */
    public Builder offset(Integer offset) {
      this.offset = offset;
      return this;
    }

    /**
     * Set by NATIVE and LOCAL protocols.
     */
    public Builder className(String className) {
      this.className = className;
      return this;
    }

    /**
     * Set by HTTP protocol
     */
    public Builder host(String host) {
      this.host = host;
      return this;
    }

    public Builder port(Integer port) {
      this.port = port;
      return this;
    }

    /**
     * Set by XMPP protocol
     */
    public Builder login(String login) {
      this.login = login;
      return this;
    }

    public Builder domain(String domain) {
      this.domain = domain;
      return this;
    }

    /**
     * Set iff type is Binder
     */
    public Builder _interface(String _interface) {
      this._interface = _interface;
      return this;
    }

    /**
     * A human-readable name for this SigmaEngine
     */
    public Builder name(String name) {
      this.name = name;
      return this;
    }

    /**
     * Causes HTTP transactions to be targetted here, the "target"
     * in the message does not change. Used to have a proxy server
     * that forwards requests. Used for testing only.
     */
    public Builder proxyhost(String proxyhost) {
      this.proxyhost = proxyhost;
      return this;
    }

    @Override
    public URI build() {
      checkRequiredFields();
      return new URI(this);
    }
  }

  public enum Protocol {
    @ProtoEnum(0)
    NATIVE,
    @ProtoEnum(1)
    LOCAL,
    @ProtoEnum(2)
    HTTP,
    @ProtoEnum(3)
    XMPP,
  }

  public enum ObjectType {
    @ProtoEnum(0)
    BASE,
    @ProtoEnum(1)
    BINDER,
    @ProtoEnum(2)
    UNIX_SOCKET,
  }
}
